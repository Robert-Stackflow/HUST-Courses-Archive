\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand*\HyPL@Entry[1]{}
\HyPL@Entry{0<</S/D>>}
\providecommand \oddpage@label [2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}动态规划作业}{2}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}计算题}{2}{subsection.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.1}15.2-1}{2}{subsubsection.1.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 对矩阵规模序列$(5,10,3,12,5,50,6)$，求矩阵链最优括号化方案。 }{2}{section*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ $((5\times 10)(10\times 3))(((3\times 12)(12\times 5))((5\times 50)(50\times 6)))$. }{2}{section*.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.2}15.4-1}{2}{subsubsection.1.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 求$\langle 1,0,0,1,0,1,0,1 \rangle $和$\langle 0,1,0,1,1,0,1,1,0 \rangle $的一个$LCS$。 }{2}{section*.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ $\langle 1,0,0,1,1,0 \rangle $或者$\langle 1,0,1,0,1,0 \rangle $. }{2}{section*.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.3}15.5-2}{2}{subsubsection.1.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 若7个关键字的概率如下表所示，求其最优二叉搜索树的结构和代价。 }{2}{section*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{}{2}{section*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 代价为3.12。$\\$ 结构如下:$\\$ }{2}{section*.8}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}算法设计题}{3}{subsection.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.1}15.1-3}{3}{subsubsection.1.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 我们对钢条切割问题进行一点修改，除了切割下的钢条段具有不同价格$p_i$外， 每次切割还要付出固定的成本$c$。这样，切割方案的收益就等于钢条段的价格之和减去切割的成本。 设计一个动态规划算法解决修改后的钢条切割问题。 }{3}{section*.9}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 修改BOTTOM-UP-CUT-ROD算法如下:除了最后一次迭代(此时$i=j$，没有切割)， 都需要在循环中的每次迭代中考虑成本$c$，令循环在$j-1$处即结束而非$j$， 保证$c$从候选收入中减去，然后选择当前最佳收入$q$和$p[j]$中的较大值。 }{3}{section*.10}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.2}15-9}{3}{subsubsection.1.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ （字符串拆分）某种字符串处理语言允许程序员将一个字符串拆分为两段。由于此操作需 要复制字符串，因此要花费个时间单位来将一个$n$个字符的字符串拆为两段。假定一个 程序员希望将一个字符串拆分为多段，拆分的顺序会影响所花费的总时间。例如，假定这 个程序员希望将一个$20$个字符的字符串在第$2$个、第$8$个以及第$10$个字符后进行拆分 (字符由左至右，从$1$开始升序编号)。如果她按由左至右的顺序进行拆分，则第一次拆分 花费$20$个时间单位，第二次拆分花费$18$个时间单位（在第$8$个字符处拆分$3\nobreakspace  {}20$间的字符 串），而第三次拆分花费$12$个时间单位，共花费$50$个时间单位。但如果她按由右至左的 顺序进行拆分，第一次拆分花费$20$个时间单位，第二次拆分花费$10$个时间单位，而第三 次拆分花费$8$个时间单位，共花费$38$个时间单位。还可以按其他顺序，比如，她可以首 先在第$8$个字符处进行拆分(时间$20$)，接着在左边一段第$2$个字符处进行拆分(时间$8$)， 最后在右边一段第$10$个字符处进行拆分(时间$12$)，总时间为$40$。$\\$ 设计算法，对给定的拆分位置，确定最小代价的拆分顺序。更形式化地，给定一个 个字符的字符串$S$和一个保存$m$个拆分点的数组$L[1\dots  m]$,计算拆分的最小代价，以及 最优拆分序列。 }{3}{section*.11}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 可以根据将数组分割为连续的子数组将问题分为若干个子问题，并尝试使用最小的花费来完成每次可能的分割。 因为需要进行m次拆分，而且最多有$m^2$中可能的拆分顺序，因此解的复杂度为$O(m^3)$，另外，因为每次添加数字的复杂度为$O(n)$， 循环中的每次迭代会消耗时间$O(\qopname  \relax o{lg}n+\qopname  \relax o{lg}m)$，因此，最终的运行时间为$O(m^3\qopname  \relax o{lg}n)$。该算法会返回拆分的最小代价和最优拆分序列。$\\$ 例如，对于拆分点数组$L=[2,5,10]$，$S=25$，调用方法为Algorithm(L,0,len(L),0,S)。 }{3}{section*.12}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.3}15-11}{3}{subsubsection.1.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ （库存规划）Rinky Dink公司是一家制造溜冰场冰面修整设备的公司。这种设备每个月 的需求量都在变化，因此公司希望设计一种策略来规划生产，需求是给定的，即它虽然 是波动的，但是可预测的。公司希望设计接下来$n$个月的生产计划。对第$i$个月，公司知 道需求$d$,即该月能够销售出去的设备的数量。令$$D=\DOTSB \sum@ \slimits@ _{i=1}^{n}d_i$$，为后$n$个月的总需求。 公司雇用的全职员工，可以提供一个月制造$m$台设备的劳动力。如果公司希望一个月内制造 多于$m$台设备，可以雇用额外的兼职劳动力，雇用成本为每制造一台机器付出$c$美元。 而且，如果在月末有设备尚未售出，公司还要付出库存成本。保存$j$台设备的成本可描 述为一个函数$h(j)$，$j=1,2,\dots  ,D$，其中对所有$1\leq j\leq D$，$h(j)\geq 0$，对$1\leq j\leq D-1$，$h(j)\leq h(j+1)$。 $\\$设计库存规划算法，在满足所有需求的前提下最小化成本。算法运行时间应为$n$和 $D$的多项式函数。 }{4}{section*.13}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 可以根据整数$i\in [n]$和$j\in [D]$划分子问题。$i$表示已经过去了多少个月，也即，只需考虑$(d_i,\dots  ,d_n)$，$j$ 表示我们最初储备了多少台设备，然后使用递推式得出从$1$到$[D]$中所有可能的制造设备数。因为子问题数量复杂度为$O(nD)$， 而且当解决某个子问题时，我们只需从$D$种选择中选取花费最小的方案，因此最终的运行时间为$O(nD^2)$。 }{4}{section*.14}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}证明题}{4}{subsection.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.3.1}15.2-5}{4}{subsubsection.1.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 令$R(i,j)$表示在一次调用MATRIX-CHAIN-ORDER过程中，计算其他表项时访问表项$m[i,j]$的次数。 证明： $$\DOTSB \sum@ \slimits@ _{i=1}^{n}\DOTSB \sum@ \slimits@ _{j=i}^{n}R(i,j)=\frac  {n^3-n}{3}$$ }{4}{section*.15}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ }{4}{section*.16}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.3.2}15.3-6}{5}{subsubsection.1.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 假定你希望兑换外汇，你意识到与其直接兑换，不如进行多种外币的一系列兑换，最后 兑换到你想要的那种外币，可能会获得更大收益。假定你可以交易$n$种不同的货币，编 号为$1,2,\dots  ,n$,兑换从1号货币开始，最终兑换为$n$号货币。对每两种货币$i$和$j$, 给定汇率$r_{ij}$,意味着你如果有$d$个单位的货币$i$,可以兑换$dr_{ij}$个单位的货币$j$。 进行一系列的交易需要支付一定的佣金，金额取决于交易的次数。令$c_{k}$表示$k$次交易需要支付 的佣金。证明：如果对所有$k=1,2,\dots  ,n,c_{k}=0$,那么寻找最优兑换序列的问题具 有最优子结构性质。然后请证明：如果佣金$c_{k}$为任意值，那么问题不一定具有最优子结 构性质。 }{5}{section*.17}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 首先假设佣金为0，设$k$表示最佳交易序列$s$中出现的货币，取值为1\nobreakspace  {}$n$号，$p_{k}$表示该序列中的第一部分(货币从1号到$k$号)，而$q_{k}$表示该序列中的其余部分。 那么$p_{k}$和$q_{k}$分别表示从1号到$k$号和从$k$号到$n$号的最佳交易序列。为了证明之，假设$p_{k}$不是最优的，而$p_{k}^{'}$是最优的。那么通过序列$p_{k}^{'}q_{k}$得到 的序列将比$s$更优，这与$s$是最优的相矛盾，$q_{k}$同理可证。$\\$ 现在假设佣金可以取任意值，假设有1号到6号的货币，且$r_{12}=r_{23}=r_{34}=r_{45}=2,r_{13}=r_{35}=6$,其余交易均为100， 令$c_1=0,c_2=1$，且对于$k\geq 3$有$c_k=10$。$\\$ 在这种情况下的最优解是$1\rightarrow 3,3\rightarrow 5$，此时花费为13。 而$1\rightarrow 3$的最优解为$1\rightarrow 2,2\rightarrow 3$，此时花费为5。$3\rightarrow 5$的最优解为$3\rightarrow 4,4\rightarrow 5$，此时花费为5。 组合这两个子情况最优解时需要花费更多代价，总花费为18，这不是最优解，因此不具有最优子结构性质。 }{5}{section*.18}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}贪心作业}{5}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}题目}{5}{subsection.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.1}16.1-4}{5}{subsubsection.2.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 假定有一组活动，我们需要将它们安排到一些教室，任意活动都可以在任意教室进行。 我们希望使用最少的教室完成所有活动。设计一个高效的贪心算法求每个活动应该在哪 个教室进行。 (这个问题称为$\textbf  {区间图着色问题}$(interval-graph color problem)。我们可以构造一个区间 图，顶点表示给定的活动，边连接不兼容的活动。要求用最少的颜色对顶点进行着色， 使得所有相邻顶点颜色均不相同一这与使用最少的教室完成所有活动的问题是对应的。) }{5}{section*.19}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 用$F$表示可供使用且已经被使用过的一组教室，用$B$表示当前繁忙的一组教室。以开始时间对这些活动进行排序，当遇到一个新的活动时，从$F$中移除一个教室，并在该教室中安排该活动，将其加入B中。 如果F为空，向F中添加一个从未被使用的教室，当一个活动结束时，将其从B中移除并放到F中，这就是最优方案。 }{5}{section*.20}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.2}16.2-7}{5}{subsubsection.2.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 给定两个集合$A$和$B$,各包含$n$个正整数。你可以按需要任意重排每个集合。重排后， 令$a_i$为集合$A$的第$i$个元素，$b_i$为集合B的第$i$个元素。于是你得到回报$$\DOTSB \prod@ \slimits@ _{i=1}^{n}a_{i}^{b_i}$$ 设计算法最大化你的回报。证明你的算法是正确的，并分析运行时间。 }{6}{section*.21}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 由于集合具有无序性，不影响回报，可假设$A$是升序排列。则可以证明当$B$也是升序排列时回报最大化。 假设不是如此，也即，存在$i<j$使得$a_i<a_j$且$b_i>b_j$，然后只考虑$i$和$j$对回报的贡献，也即，$a_i^{b_i}a_j^{b_j}$， 然后，如果交换$b_i$和$b_j$的次序，那么贡献为$a_i^{b_j}a_j^{b_i}$，可见后者比前者大，因为有$(\frac  {a_j}{a_i})^{b_i-b_j}>1$, 因此，可得在这种次序下得到的回报不是最大化的。 }{6}{section*.22}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.3}16.3-3}{6}{subsubsection.2.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 如下所示，8个字符对应的出现频率是斐波那契数列的前8个数，此频率集合的赫夫曼编码是怎样的？ \textbf  {$\\a:1\hskip 1em\relax b:1\hskip 1em\relax c:2\hskip 1em\relax d:3\hskip 1em\relax e:5\hskip 1em\relax f:8\hskip 1em\relax g:13\hskip 1em\relax h:21\\$} 你能否推广你的结论，求频率集为前$n$个斐波那契数的最优前缀码？ }{6}{section*.23}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Answer:}{6}{section*.24}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{}{6}{section*.25}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{推广:$\\$}{6}{section*.26}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$T_2.left=c_2,T_2.right=c_1,T_2.freq=c_1.freq+c_2.freq=2$}{6}{section*.27}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$(\forall i;3\leq i\leq n)T_i.left=c_i,T_i.right=T_{i-1},T_i.freq=c_i.freq+T_{i-1}.freq$}{6}{section*.28}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.4}16-1}{6}{subsubsection.2.1.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ （找零问题）考虑用最少的硬币找$n$美分零钱的问题。假定每种硬币的面额都是整数。 $a.$设计贪心算法求解找零问题，假定有25美分、10美分、5美分和1美分4种面额的硬 币。证明你的算法能找到最优解。 $b.$假定硬币面额是$c$的幂，即面额为$c^0,C^1,\dots  ,c^k,c$和$k$为整数，$c>1,k\geq 1$。 证明：贪心算法总能得到最优解。 $c.$设计一组硬币面额，使得贪心算法不能保证得到最优解。这组硬币面额中应该包含1美 分，使得对每个零钱值都存在找零方案。 $d.$设计一个$O(nk)$时间的找零算法，适用于任何$k$种不同面额的硬币，假定总是包含1美 分硬币。 }{7}{section*.29}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ $a.$总是给最大面额的硬币，重复该过程，直到剩余的零钱为0。$\\$ $b.$假设存在最优解$(x_0,x_1,\dots  ,x_k)$，其中$x_i$表示面值为$c_i$的零钱的数量， 则对于$i<k$应有$x_i<c$。假设存在$x_i$使得$x_i>c$，那么可以以$c$为递减量减小$x_i$，以1为递减量减小$x_{i+1}$， 这个硬币的集合的总值相同，却只包含$c-1$个硬币，所以前者方案不是最优的，相互矛盾，因此得证。$\\$ $c.$令货币面额为${1,3,4}$，要找6美分硬币，贪心算法得到的结果为${1,1,4}$，而最优解决方案应为${3,3}$。$\\$ $d.$参考动态规划算法$MAKE-CHANGE(S,v)$，由于第一个for循环执行$n$次，内部for循环执行$k$次，之后的while循环执行最多n次，因此最终的时间为$O(nk)$。 }{7}{section*.30}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.5}思考题}{7}{subsubsection.2.1.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 求以下背包问题的最优解:$n=7,M=15,(p_1,\dots  ,p_7)=(10,5,15,7,6,18,3),(w_1,\dots  ,w_7)=(2,3,5,7,1,4,1)$ }{7}{section*.31}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 排序得到$p_5/w_5>p_1>w_1>p_6/w_6>p_3/w_3>p_7/w_7>p_2/w_2>p_4/w_4$， 因此得到结果为$X=(1,\frac  {2}{3},1,0,1,1,1)$，$F(M)=\frac  {166}{3}$。 }{7}{section*.32}\protected@file@percent }
\gdef \@abspage@last{7}
