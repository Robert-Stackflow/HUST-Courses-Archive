\relax 
\providecommand \oddpage@label [2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}作业1:抄写伪代码}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}INSERTIONSORT}{1}{}\protected@file@percent }
\@writefile{loa}{\contentsline {algocf}{\numberline {1}{\ignorespaces INSERTION-SORT(A)}}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}MERGESORT}{1}{}\protected@file@percent }
\@writefile{loa}{\contentsline {algocf}{\numberline {2}{\ignorespaces MERGE-SORT($A,p,r$)}}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}MERGE}{2}{}\protected@file@percent }
\@writefile{loa}{\contentsline {algocf}{\numberline {3}{\ignorespaces MERGE-SORT(A,p,r)}}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}作业2:$ Q \& A $}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}1.2-2}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Question:}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{Suppose We are comparing implementations of insertion sort and merge sort on the same machine. For inputs of size $n$,insertion sort runs in $8n^2$ steps, while merge sort runs in $64n \lg  n$ steps. For which values of $n$ does insertion sort beat merge sort?}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Answer:}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{$8n^2<64n \lg  n$}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{$2^n<n^8$}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{$2 \leq n \leq 43$}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}1.2-3}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{What is the smallest value of $n$ such that an algorithm whose running time is $100n^2$ runs faster than an algorithm whose running time is $2^n$ on the same machine?}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Answer:}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{$100n^2<2^n$}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{$n \geq 15$}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}思考题:选择算法}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Question:}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{Consider sorting $n$ numbers stored in array $A$ by first finding the smallest element of $A$ and exchanging it with the element in $A[1]$. Then find the second smallest element of $A$, and exchange it with $A[2]$. Continue in this manner for the first $n-1$ elements of $A$.Write pseudocode for this algorithm, which is known as \textbf  {selection sort}. What loop invariant does this algorithm maintain? Why does it need to run for only the first $n-1$ elements, rather than for all $n$ elements? Give the best-case and worst-case running times of selection sort in $\Theta $-notation.}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Pseudocode:}{3}{}\protected@file@percent }
\@writefile{loa}{\contentsline {algocf}{\numberline {4}{\ignorespaces SELCTION-SORT}}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Loop invariant:}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{在循环初始，子数组$A[1..i-1]$由最小的$i-1$个元素有序排列而成}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Why does it need to run for only the first $n-1$ elements, rather than for all $n$ elements?}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{经过n-1次迭代，子数组$A[1..n-1]$由最小的$n-1$个元素有序排列而成,因此,$A[n]$仍然是最大的元素}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Running time:}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{$\Theta (n^2)$}{3}{}\protected@file@percent }
\gdef \@abspage@last{3}
