\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand*\HyPL@Entry[1]{}
\HyPL@Entry{0<</S/D>>}
\providecommand \oddpage@label [2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}22-25章作业}{2}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}计算题}{2}{subsection.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.1}24.1-1}{2}{subsubsection.1.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 在图24-4上运行$Bellman-Ford$算法，使用结点$z$作为源结点。 在每一遍松弛过程中，以图中相同的次序对每条边进行松弛，给出每遍松弛操作后的$d$值和$\pi $值。 然后，把边$(z,x)$的权重改为4，再次运行该算法，这次使用$s$作为源结点。 }{2}{section*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 使用$z$作为源结点，则得到每遍松弛操作后的值如下:$\\$ }{2}{section*.3}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces $d$的值}}{2}{table.1}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces $\pi $的值}}{2}{table.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{}{2}{table.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{改变边$(z,x)$的权重为4后，使用$s$作为源结点，则得到每遍松弛操作后的值如下:$\\$}{2}{section*.5}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces $d$的值}}{2}{table.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subparagraph}{}{2}{table.4}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces $\pi $的值}}{3}{table.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.2}24.4-1}{3}{subsubsection.1.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 请给出下面差分约束系统的可行解或证明该系统没有可行解。 }{3}{section*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 设约束图的顶点是$${v_0,v_1,v_2,v_3,v_4,v_5,v_6}$$ 边为$$(v_0,v_1),(v_0,v_2),(v_0,v_3),(v_0,v_4),(v_0,v_5),(v_0,v_6),(v_2,v_1),(v_4,v_1),(v_3,v_2),(v_5,v_2),(v_6,v_2),(v_6,v_3)$$ 对应权重分别为$$0,0,0,0,0,0,1,-4,2,7,5,10,2,-1,3,-8$$ 计算$$(\delta (v_0,v_1),\delta (v_0,v_2),\delta (v_0,v_3),\delta (v_0,v_4),\delta (v_0,v_5),\delta (v_0,v_6))$$ 得到$$(-5,-3,0,-1,-6,-8)$$ 而该方案是可行的。 }{3}{section*.8}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.3}25.2-1}{3}{subsubsection.1.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 在图25-2所示的带权重的有向图上运行$Floyd-Warshall$算法，给出外层循环的每一次 迭代所生成的矩阵$D^{(k)}$。 }{4}{section*.9}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ }{4}{section*.10}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$k=1:$}{4}{section*.11}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$k=2:$}{4}{section*.12}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$k=3:$}{4}{section*.13}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$k=4:$}{4}{section*.14}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$k=5:$}{4}{section*.15}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{$k=6:$}{5}{section*.16}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}设计、证明题}{5}{subsection.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.1}24.1-3}{5}{subsubsection.1.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 给定$G=(V,E)$是一带权重且没有权重为负值的环路的有向图，对于所有结点$v\in V$, 从源结点$s$到结点$v$之间的最短路径中，包含边的条数的最大值为$m$。(这里，判断最 短路径的根据是权重，不是边的条数。）请对算法$BELLMAN-FORD$进行简单修改，可 以让其在$m+1$遍松弛操作之后终止，即使$m$不是事先知道的一个数值。 }{5}{section*.17}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 由上界理论，可得经过$m$次迭代，$d$的值不会被改变。 因此，在第$m+1$次迭代中$d$的值不会被迭代。 然而，事先并不知道$m$的确切值，因此无法确切地进行$m$次迭代后终止算法。 如果尝试当$d$的值不会再改变时终止算法，此时将已经进行了$m+1$次迭代。 }{5}{section*.18}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.2}24-3}{5}{subsubsection.1.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 套利交易指的是使用货币汇率之间的差异来将一个单位的货币转换为多于 一个单位的同种货币的行为。例如，假定1美元可以购买49印度卢比，1印度卢比可以 购买2日元，1日元可以购买0.0107美元。那么通过在货币之间进行转换，一个交易商 可以从1美元开始，购买49×2×0.0107=1.0486美元，从而获得$4.86\%$的利润。 假设给定$n$种货币$c_1,c_2,\dots  ,c_n$和一个$n\times n$的汇率表$R$,一个单位的$c_i$货币可以 购买$R[i,j]$单位的$c_j$货币。$a.$ 给出一个有效的算法来判断是否存在一个货币序列$\langle c_{i_1},c_{i_2},\dots  ,c_{i_k}\rangle $， 使得$R[i_1,i_2]\cdot R[i_2,i_3]\cdot \dots  \cdot R[i_{k-1},i_k]\cdot R[i_k,i_1]>1$请分析算法的运行时间。$b.$ 给出一个有效算法来打印出这样的一个序列(如果存在这样一种序列)。分析算法的运行时间。 }{5}{section*.19}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ $a.$通过考虑以下步骤来实现该算法$\newline  $ $R[i_1,i_2]\cdot R[i_2,i_3]\cdot \dots  \cdot R[i_k,i_1]>1$，$\newline  $ $\qopname  \relax o{ln}(R[i_1,i_2])+\qopname  \relax o{ln}(R[i_2,i_3])+\dots  +\qopname  \relax o{ln}(R[i_k,i_1])>0$，$\newline  $ $-\qopname  \relax o{ln}(R[i_1,i_2])-\qopname  \relax o{ln}(R[i_2,i_3])-\dots  -\qopname  \relax o{ln}(R[i_k,i_1])<0\newline  $ $b.$$\newline  $ 为实现该功能，首先在$a$的基础上，对所有边的权重执行相同的修改。 然后，按照$BellmanFold$算法，松弛所有边$|V|-1$次来检测负重循环，并记录所有顶点的$d$值。 然后松弛所有边$|V|$次并检查哪些顶点的$d$值有所减少。 所有这些顶点一定位于某些可能不相交的负重循环集中,称这组顶点集为$S$。 为了找到其中一个循环，可以在$S$中选择任何一个顶点，并贪心地选择与其有边相连并在$S$中的顶点。 在这个过程中，永远不会到达死胡同，因为集合$S$由处于某些循环中的顶点组成，所以每个顶点的出度至少为1。 }{6}{section*.20}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.3}25.2-7}{6}{subsubsection.1.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 在$Floyd-Warshall$算法中构建最短路径的另一种办法是使用$\phi _{ij}^{(k)}$， 其中$i,j,k=1,2,\dots  ,n$，$\phi _{ij}^{(k)}$是从结点$i$到结点$j$的一条中间所有结点都取自集合${1,2,\dots  ,k}$的最短路径上编号 最大的中间结点。请给出$\phi _{ij}^{(k)}$的一个递归公式，并修改$Floyd-Warshall$过程来计算$\phi _{ij}^{(k)}$的值， 并重写$PRINT-ALL-PAIRS-SHORTEST-PATH$过程，使其以矩阵$\Phi =(\phi _{ij}^{(k)})$作为输人。 矩阵$\Phi $与15.2节所讨论的链式矩阵乘法中的表格存在何种相似点？ }{6}{section*.21}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 当$d_{ik}^{(k)}+d_{kj}^{(k)}\geq d_{ij}^{(k-1)}$时，使$\phi _{ij}^{(k)}=\phi _{ij}^{(k-1)}$， 否则$\phi _{ij}^{(k)}=k$，以此递归计算$\phi _{ij}^{(k)}$。 修改$Floyd-Warshall$过程时，只需使用上述递归公式计算$\phi (k)$的值，这不会增加其渐进运行时间。 已知在$\phi _{ij}^{(k)}$中得到的$n^3$个值，则可以重新构建从$i$到$j$的最短路径， 因为该路径中最大的顶点为$\phi _{ij}^{(n)}$，记作$a_1$。那么在$a_1$之前的路径中的最大顶点为$\phi _{ia_1}^{(a_1-1)}$， 在$a_1$之后的路径中的最大顶点为$\phi _{a_1j}^{(a_1-1)}$，如此递归直至得到出现的最大元素为$NIL$， 这样可以一直细分路径直至最短路径被完全构建。 }{6}{section*.22}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}思考题}{6}{subsection.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.3.1}25.2-6}{6}{subsubsection.1.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Question:$\\$ 我们怎样才能使用$Floyd-Warshall$算法的输出来检测权重为负值的环路? }{6}{section*.23}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{ Answer:$\\$ 1.检测结果矩阵主对角线是否存在负值。 2.多执行一遍循环，如果还有矩阵元素更新，表明存在负权重环路 }{6}{section*.24}\protected@file@percent }
\gdef \@abspage@last{6}
