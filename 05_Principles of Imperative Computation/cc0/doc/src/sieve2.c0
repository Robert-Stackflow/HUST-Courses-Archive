/* file sieve2.c0 */
/* Computing prime numbers using the Sieve of Eratosthenes */

bool isPrime(int n)
{
  if (n < 2) return false;
  if (n == 2) return true;
  if (n % 2 == 0) return false;
  for (int factor = 3; factor <= n/factor; factor += 2) {
    if (n % factor == 0)
      return false;
  }
  return true;
}

int int_max() { return 2147483647; } /* 32 bit two's complement */

bool[] sieve(int n)
//@requires 2 <= n && n < int_max()/2;
//@ensures \length(\result) == n+1;
{
  bool[] isPrime = alloc_array(bool, n+1);
  isPrime[0] = false; isPrime[1] = false;
  for (int i = 2; i < n+1; i++)
     isPrime[i] = true;

  for (int prime = 2; prime < n+1; prime++)
    if (isPrime[prime] == true)  /* not yet crossed out, so really a prime */
      /* cross out all its multiples, up to n */
      for (int multiple = 2*prime; multiple < n+1; multiple += prime)
         isPrime[multiple] = false;  /* cross out */

  return isPrime;
}

int piUsingSieve(int n)
//@requires 2 <= n && n < int_max()/2;
{
  bool[] isPrime = sieve(n);

  int count = 0;
  for (int i = 2; i < n+1; i++)
    if (isPrime[i] == true) count++;
  return count;
}

