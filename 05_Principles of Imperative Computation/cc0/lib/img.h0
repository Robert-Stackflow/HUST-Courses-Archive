/* Libary img */
/* Functions for manipulating ARGB-encoded images */
/* Author: Rob Arnold */
/* Contracts: Frank Pfenning */

struct image;
typedef struct image* image_t;

/* Retrieves the width of the given image */
int image_width(image_t image)
  //@requires image != NULL;
  //@ensures \result > 0;
  ;

/* Retrieves the height of the given image */
int image_height(image_t image)
  //@requires image != NULL;
  //@ensures \result > 0;
  ;

/* Creates an ARGB image with dimensions width * height */
image_t image_create(int width, int height)
  //@requires 0 < width && 0 < height;
  //@ensures \result != NULL;
  //@ensures image_width(\result) == width && image_height(\result) == height;
  ;

/* Copies an existing image */
image_t image_clone(image_t image)
  //@requires image != NULL;
  //@ensures image_width(\result) == image_width(image);
  //@ensures image_height(\result) == image_height(image);
  ;

/* Deprecated.  Functions as a no-op since images are now garbage collected */
void image_destroy(image_t image);

/* Returns a copy of a subrectangle of the given image. The new image has
 * dimensions width * height. If part of the given rectangle is not contained
 * within the given image, those pixels are assumed to be transparent black.
 */
image_t image_subimage(image_t image, int x, int y, int width, int height)
  //@requires image != NULL;
  //@ensures image_width(\result) == width;
  //@ensures image_height(\result) == height;
  ;

/* Loads an image from the given path and convert it if need be to an
 * ARGB image.  If the file does not exist, it returns NULL.  Aborts,
 * if the file has the wrong format.
 */
image_t image_load(string path);

/* Saves the given image to disk, inferring the file type from the file
 * extension given in the path.
 */
void image_save(image_t image, string path)
  //@requires image != NULL;
  ;

/* Returns an array of pixels representing the image. The pixels are
 * given line by line so a pixel at (x,y) would be located at
 * y*image_width(image) + x. Any writes to the array will be reflected
 * in calls to image_save, image_clone and image_subimage. The
 * channels are encoded as 0xAARRGGBB.
 */
int[] image_data(image_t image)
  //@requires image != NULL;
  //@ensures \length(\result) == image_width(image) * image_height(image);
  ;
