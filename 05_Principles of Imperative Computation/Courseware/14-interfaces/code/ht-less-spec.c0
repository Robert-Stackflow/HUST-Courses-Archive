/* 
 * Hash tables (fixed size)
 * 15-122 Principles of Imperative Computation
 * Frank Pfenning
 */

#use <conio>
#use <util>

/******************************/
/* client-side implementation */
/******************************/

typedef int pixel;
typedef struct word_with_color* elem;
typedef string key;

struct word_with_color {
  string word;
  pixel color;
};

int hash(key k, int m) { 
  return abs(hash_string(k) % m);
}

bool key_equal(key k1, key k2) { 
  return string_equal(k1, k2); 
}

key elem_key(elem e) 
//@requires e != NULL;
{
  return e->word;
}

/*************************/
/* client-side interface */
/*************************/
// typedef ______* elem;
// typedef ______ key;

int hash(key k, int m)
//@requires m > 0;
//@ensures 0 <= \result && \result < m;
  ;

bool key_equal(key k1, key k2);

key elem_key(elem e)
//@requires e != NULL;
  ;

/**************************/
/* library side interface */
/**************************/
struct ht_header;
typedef struct ht_header* ht;

ht ht_new(int capacity)
//@requires capacity > 0;
  ;
elem ht_lookup(ht H, key k);	/* O(1) avg. */
void ht_insert(ht H, elem e)	/* O(1) avg. */
//@requires e != NULL;
  ;
int ht_size(ht H);              /* O(1) */
void ht_stats(ht H);            /* Print debugging info about the table */  

/*******************************/
/* library-side implementation */
/*******************************/
struct chain_node {
  elem data;			/* data != NULL */
  struct chain_node* next;
};
typedef struct chain_node chain;

int chain_length(chain* p) {
  int i = 0;
  while (p != NULL) {
    i++;
    p = p->next;
  }
  return i;
}

struct ht_header {
  int size;			/* size >= 0 */
  int capacity;			/* capacity > 0 */
  chain*[] table;		/* \length(table) == capacity */
};

bool is_ht(ht H) {
  if (H == NULL) return false;
  if (!(H->size >= 0)) return false;
  if (!(H->capacity > 0)) return false;
  //@assert \length(H->table) == H->capacity;
  /* check that each element of table is a valid chain */
  /* includes checking that all elements are non-null */
  return true;
}

ht ht_new(int capacity)
//@requires capacity > 0;
//@ensures is_ht(\result);
{
  ht H = alloc(struct ht_header);
  H->size = 0;
  H->capacity = capacity;
  H->table = alloc_array(chain*, capacity);
  /* Every cell in H->table is initialized to NULL */
  return H;
}

int ht_size(ht H) 
//@requires is_ht(H);
{
  return H->size;
}

/* ht_lookup(H, k) returns NULL if key k not present in H */
elem ht_lookup(ht H, key k)
//@requires is_ht(H);
{
  int i = hash(k, H->capacity);
  chain* p = H->table[i];
  while (p != NULL) 
    // loop invariant: p points to a chain
    {
      //@assert p->data != NULL;
      if (key_equal(elem_key(p->data), k))
        return p->data;
      else
        p = p->next;
    }
  /* not in chain */
  return NULL;
}

void ht_insert(ht H, elem e)
//@requires is_ht(H);
//@requires e != NULL;
//@ensures is_ht(H);
//@ensures ht_lookup(H, elem_key(e)) != NULL;
{
  key k = elem_key(e);
  int i = hash(k, H->capacity);

  chain* p = H->table[i];
  while (p != NULL) 
    // loop invariant: p points to a chain
    {
      //@assert p->data != NULL;
      if (key_equal(elem_key(p->data), k))  {
        /* overwrite existing element */
        p->data = e;
        return;
      } else {
        p = p->next;
      }
    }
  //@assert p == NULL;
  /* prepend new element */
  chain* q = alloc(struct chain_node);
  q->data = e;
  q->next = H->table[i];
  H->table[i] = q;
  (H->size)++;
  return;
}

// Debugging: report the distribution about the hashtable
void ht_stats(ht H) 
//@requires is_ht(H);
{
  int max = 0;
  int[] A = alloc_array(int, 11);
  for(int i = 0; i < H->capacity; i++) {
    int j = chain_length(H->table[i]);
    if (j > 9) A[10]++;
    else A[j]++;
    if (j > max) max = j;
  }

  println("Hash table distribution: how many chains have size... ");
  for(int i = 0; i < 10; i++) {
    print("..."); printint(i); print(":   "); printint(A[i]); print("\n");
  }
  print("...10+: "); printint(A[10]); print("\n");
  print("Longest chain: "); printint(max); print("\n");
}
