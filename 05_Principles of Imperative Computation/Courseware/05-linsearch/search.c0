bool is_in(int x, int[] A, int lower, int upper)
//@requires lower >= 0 && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i<upper; i++)
    //@loop_invariant i>=lower && i<=upper;
    if (A[i] == x) return true;
  return false;
}

bool is_sorted(int[] A, int lower, int upper)
//@requires lower>=0 && lower<=upper && upper<=\length(A);
{
  for (int i=lower; i<upper-1; i++)
    //@loop_invariant i>=lower;
    if (A[i]>A[i+1]) return false;
  return true;
}

int search(int x, int[] A, int n)
//@requires n>=0 n<=\length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result==-1 && !is_in(x, A, 0, n))
      || (\result>=0 && \result<n && A[\result]==x);
@*/
{
  for (int i=0; i<n; i++)
    //@loop_invariant i>=0 && i<=n;
    //@loop_invariant i==0 || A[i-1]<x;
    {
      if (A[i] == x) return i;
      else if (A[i] > x) return -1;
      //@assert A[i] < x;
    }
  return -1;
}
