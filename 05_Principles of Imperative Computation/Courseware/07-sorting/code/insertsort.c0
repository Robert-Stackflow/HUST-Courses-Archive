/* Insertion Sort
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 */


void swap_down(int[] A, int j, int i)
//@requires 0 <= j && j <= i && i < \length(A);
//@requires is_sorted(A, 0, i);
//@requires ge_seg(A[i], A, 0, j) && le_seg(A[i], A, j, i);
//@ensures is_sorted(A, 0, i+1);
{
  for (int k = i; j < k; k--)
    //@loop_invariant j <= k && k <= i;
    //@loop_invariant is_sorted(A, j, k) && is_sorted(A, k+1, i+1);
    //@loop_invariant ge_seg(A[k], A, 0, j) && le_seg(A[k], A, j, i+1);
    swap(A, k-1, k);
  return;
}

/* find_place using linear search; binary search below */
/*
int find_place(int x, int[] A, int i)
//@requires 0 <= i && i <= \length(A);
//@requires is_sorted(A, 0, i);
//@ensures ge_seg(x, A, 0, \result) && le_seg(x, A, \result, i);
{
  for (int j = 0; j < i; j++)
    //@loop_invariant 0 <= j && j <= i;
    //@loop_invariant ge_seg(x, A, 0, j);
    if (x < A[j]) return j;
  return i;
}
*/

/* binary search version */
int find_place(int x, int[] A, int i)
//@requires 0 <= i && i <= \length(A);
//@requires is_sorted(A, 0, i);
//@ensures ge_seg(x, A, 0, \result) && le_seg(x, A, \result, i);
{
  int lower = 0;
  int upper = i;
  while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= i;
    //@loop_invariant ge_seg(x, A, 0, lower) && le_seg(x, A, upper, i);
    { int mid = lower + (upper-lower)/2;
      if (A[mid] < x)
	lower = mid+1;
      else //@assert x <= A[mid];
	upper = mid;
    }
  //@assert lower == upper;
  return lower;
}

void sort(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(A, lower, upper);
{
  for (int i = lower; i < upper; i++)
    //@loop_invariant lower <= i && i <= upper;
    //@loop_invariant is_sorted(A, lower, i);
    { 
      int j = find_place(A[i], A, i);
      swap_down(A, j, i);
    }
}
