int search(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))                     /* correct by (32) (31) (12) (13) (16) (3) */
        || ((0 <= \result && \result < n)                            /* correct by (23) (21) (12) */
            && A[\result] == x);                                     /* correct by (22) */
  @*/
{
  int lower = 0;
  int upper = n;
  while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;   /* correct by (9) (10) (2) and (12) (25)/(28) (21) arithmetic */
    /*@loop_invariant lower == 0 || A[lower-1] < x; @*/             /* correct by (9) and (25) (24) (13) */

    
    /*@loop_invariant upper == n || A[upper] > x; @*/               /* correct by (10) and (16) (27) (28) */


    {
      int mid = lower + (upper-lower)/2;
      //@assert lower <= mid && mid < upper;                        /* correct by (12) (20) and very careful arithmetic (lecture) */
      if (A[mid] == x) {
        return mid;
      } else if (A[mid] < x) {
	lower = mid+1;
      } else {
        //@assert A[mid] > x;                                       /* correct by (22) (24) */
	upper = mid;
      } 
    }
  //@assert lower == upper;                                         /* correct by (11) (12) */
  return -1;
}
