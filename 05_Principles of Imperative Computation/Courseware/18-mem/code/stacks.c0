/*
 * Stacks
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 * Frank Pfenning
 */

typedef int elem;

/* Interface to stacks of elems */

typedef struct stack_header* stack;

bool stack_empty(stack S);      /* O(1) */
stack stack_new();              /* O(1) */
void push(stack S, elem e);     /* O(1) */
elem pop(stack S)               /* O(1) */
//@requires !stack_empty(S);
  ;

/* Implementation of stacks */

/* Aux structure of linked lists */
struct list_node {
  elem data;
  struct list_node* next;
};
typedef struct list_node list;

/* is_segment(start, end) will diverge if list is circular! */
bool is_segment(list* start, list* end) {
  list* p = start;
  while (p != end) {
    if (p == NULL) return false;
    p = p->next;
  }
  return true;
}

/* Stacks */

struct stack_header {
  list* top;
  list* bottom;
};

bool is_stack(stack S) {
  if (S == NULL) return false;
  if (S->top == NULL || S->bottom == NULL) return false;
  if (!is_segment(S->top, S->bottom)) return false;
  return true;
}

bool stack_empty(stack S)
//@requires is_stack(S);
{
  return S->top == S->bottom;
}

stack stack_new()
//@ensures is_stack(\result);
//@ensures stack_empty(\result);
{
  stack S = alloc(struct stack_header);
  list* p = alloc(struct list_node); 
  /* Dummy node: does not need to be initialized! */
  S->top = p;
  S->bottom = p;
  return S;
}

void push(stack S, elem e)
//@requires is_stack(S);
//@ensures is_stack(S) && !stack_empty(S);
{
  list* p = alloc(struct list_node);
  p->data = e;
  p->next = S->top;
  S->top = p;
}

elem pop(stack S)
//@requires is_stack(S);
//@requires !stack_empty(S);
//@ensures is_stack(S);
{
  elem e = S->top->data;
  S->top = S->top->next;
  return e;
}
