/* Testing binary search trees
 * 15-122 Principles of Imperative Computation, Fall 2010
 * Frank Pfenning
 */

#use <string>
#use <conio>
#use <rand>
#use <args>

elem elem_fromint(int k) {
  string s = string_fromint(k);
  struct wcount* wc = alloc(struct wcount);
  wc->word = s;
  wc->count = k;
  return wc;
}

int main() {
  int* n_ptr = alloc(int);
  *n_ptr = (1<<13)+31;
  args_int("-n", n_ptr);
  if(*n_ptr < 0) error("Number of elements (-n <elems>) may not be negative");

  int* r_ptr = alloc(int);
  *r_ptr = 100;
  args_int("-r", r_ptr);
  if(*r_ptr < 0) error("Number of repetitions (-r <reps>) may not be negative");

  args_parse();

  int n = *n_ptr;		        // 1<<9 for -d; 1<<13 for timing
  int num_tests = *r_ptr;		// 10 for -d;  100 for timing
  int seed = 0xc0c0ffee;
  rand_t gen = init_rand(seed);
  elem[] A = alloc_array(elem, n);
  for (int i = 0; i < n; i++)
    A[i] = elem_fromint(rand(gen));
  
  assert(n+num_tests > 0);
  print("Testing bst of size "); printint(n);
  print(" "); printint(num_tests); print(" times\n");
  for (int j = 0; j < num_tests; j++) {
    bst B = bst_new();
    for (int i = 0; i < n; i++) {
      elem e = A[(j+i) % n];
      bst_insert(B, e);
      assert(bst_lookup(B, elem_key(e)) == e); /* insert ok? */
    }
    /* next line violates interface... */
    // assert(is_bst(B)); /* repeated insert failed to preserve order */
  }
  return 0;
}
