/*
 * Linked lists
 *
 * 15-122 Principles of Imperative Computation */

#use <util>

typedef struct list_node list;

struct list_node {
  elem data;
  list* next;
};






























bool is_in_bounded(list* check, list* start, int numsteps)
//@requires 0 <= numsteps;
{
  int i = 0;
  for (list* p = start; p != NULL; p = p->next)
    //@loop_invariant 0 <= i && i <= numsteps;
    {
      if (i == numsteps) {
        // If the thing we're looking for is in the list,
        // it is further on.
        return false;
      }

      if (p == check) {
        // Oh, here it is!
        return true;
      }

      i++;
    }

  // We reached a NULL, it's not in the bounded list
  return false;
}
































bool is_segment(list* start, list* end) {
  int i = 0;
  for (list* p = start; p != NULL; p = p->next)
    //@loop_invariant 0 <= i;
    {
      //@assert(is_in_bounded(p, start, i+1));
      if (is_in_bounded(p, start, i)) return false; // CYCLE!
      if (p == end) return true; // DONE!
      i += 1;
    }

  // We reached NULL without getting to end first
  return false;
}


