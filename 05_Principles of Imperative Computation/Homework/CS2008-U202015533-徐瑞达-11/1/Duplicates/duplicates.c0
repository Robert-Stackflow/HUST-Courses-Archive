#use <string>
bool is_sorted(string[ ] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
	for (int i = lower; i < upper-1; i++)
	//@loop_invariant 0 <= i && i <= \length(A)-1 &&lower <= i;
	  if(string_compare(A[i], A[i+1]) > 0)
            return false;
	return true;
}
bool all_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
	int i;
	for (i = 0; i < n-1; i++)
    //@loop_invariant 0 <= i && i <= \length(A) - 1;
        if (string_equal(A[i], A[i+1]))
            return false;
	return true;
}
int count_distinct(string[] A, int n)
//@requires 0 <= n&& n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures 0 <= \result && \result <= n;
{
	int count = n < 1 ? 0 : 1;
    for (int i = 1; i < n; i++)
    //@loop_invariant 0 <= i-1 && i <= \length(A);
    {
        if (!string_equal(A[i-1], A[i]))
            count++;
    }
    return count;
}
string[] remove_duplicates(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0 ,n);
//@ensures 0 <= \length(\result) && \length(\result) <= n;
//@ensures is_sorted(\result, 0, \length(\result));
//@ensures all_distinct(\result, \length(\result));
//@ensures count_distinct(\result, \length(\result)) == \length(\result);
{
	int i = 0;
    int j = 0;
    int size = count_distinct(A, n);
    string[] ResStr = alloc_array(string, size);
    for ( ; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant 0 <= j && j <= size && j <= i;
    {
        if (j == 0)
        {
            ResStr[j] = A[i];
            j++;
        }
        else if (!string_equal(ResStr[j-1], A[i]))
        {
            ResStr[j] = A[i];
            j++;
        }
    }
    //@assert(j == size);
    return ResStr;
}
