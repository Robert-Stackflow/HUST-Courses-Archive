bool is_in(int x, int[ ] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
	for (int i = lower; i < upper; i++)
	  //@loop_invariant lower <= i && i <= upper;
	{
	      if (A[i] == x) return true;
	}
	return false;
}

bool is_sorted(int[ ] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
	for (int i = lower; i < upper-1; i++)
	  //@loop_invariant lower <= i;
	  if (!(A[i] <= A[i+1])) return false;
	return true;
}

int binsearch(int x, int[] A, int n)
//@requires n>=0 && n<=\length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result==-1 && !is_in(x, A, 0, n))
      || (\result>=0 && \result<n && A[\result]==x);
@*/
{
    int lower = 0;
    int upper = n;
    while (lower < upper)
    //@loop_invariant lower >=0 && lower<=upper && upper<=n;
    //@loop_invariant lower==0||A[lower-1]<x;
    //@loop_invariant upper==n||A[upper]>x;
    {
        int mid = lower + (upper - lower) / 2;
        //@assert lower<=mid && mid<=upper;
        if (A[mid] == x) {
            while(mid > 0 && A[mid-1] == A[mid])
                mid--;
            return mid;
        }
        else if
            (A[mid] < x) lower = mid + 1;
        else
        //@assert (A[mid] > x);
            upper = mid;
    }
    return -1;
}
