; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28612.0 

	TITLE	C:\新书示例\MMX指令\array_add\array_add.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__9EC7AED0_array_add@c DB 01H
msvcjmc	ENDS
PUBLIC	_main
PUBLIC	__JustMyCode_Default
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\新书示例\MMX指令\array_add\array_add.c
;	COMDAT _main
_TEXT	SEGMENT
_i$ = -124						; size = 4
_y$ = -112						; size = 48
_x$ = -56						; size = 48
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 3    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9EC7AED0_array_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 4    : 	int x[12] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };

	mov	DWORD PTR _x$[ebp], 1
	mov	DWORD PTR _x$[ebp+4], 2
	mov	DWORD PTR _x$[ebp+8], 3
	mov	DWORD PTR _x$[ebp+12], 4
	mov	DWORD PTR _x$[ebp+16], 5
	mov	DWORD PTR _x$[ebp+20], 6
	mov	DWORD PTR _x$[ebp+24], 7
	mov	DWORD PTR _x$[ebp+28], 8
	mov	DWORD PTR _x$[ebp+32], 9
	mov	DWORD PTR _x$[ebp+36], 10		; 0000000aH
	mov	DWORD PTR _x$[ebp+40], 11		; 0000000bH
	mov	DWORD PTR _x$[ebp+44], 12		; 0000000cH

; 5    : 	int y[12] = { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }; 

	mov	DWORD PTR _y$[ebp], 11			; 0000000bH
	mov	DWORD PTR _y$[ebp+4], 12		; 0000000cH
	mov	DWORD PTR _y$[ebp+8], 13		; 0000000dH
	mov	DWORD PTR _y$[ebp+12], 14		; 0000000eH
	mov	DWORD PTR _y$[ebp+16], 15		; 0000000fH
	mov	DWORD PTR _y$[ebp+20], 16		; 00000010H
	mov	DWORD PTR _y$[ebp+24], 17		; 00000011H
	mov	DWORD PTR _y$[ebp+28], 18		; 00000012H
	mov	DWORD PTR _y$[ebp+32], 19		; 00000013H
	mov	DWORD PTR _y$[ebp+36], 20		; 00000014H
	mov	DWORD PTR _y$[ebp+40], 21		; 00000015H
	mov	DWORD PTR _y$[ebp+44], 22		; 00000016H

; 6    : 	int i;
; 7    : 	for (i = 0; i < 12; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jge	SHORT $LN3@main

; 8    : 		x[i] = x[i] + y[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _x$[ebp+eax*4]
	mov	edx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _y$[ebp+edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _x$[ebp+eax*4], ecx
	jmp	SHORT $LN2@main
$LN3@main:

; 9    : 	return 0;

	xor	eax, eax

; 10   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@main:
	DD	2
	DD	$LN8@main
$LN8@main:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN6@main
	DD	-112					; ffffff90H
	DD	48					; 00000030H
	DD	$LN7@main
$LN7@main:
	DB	121					; 00000079H
	DB	0
$LN6@main:
	DB	120					; 00000078H
	DB	0
_main	ENDP
_TEXT	ENDS
END
