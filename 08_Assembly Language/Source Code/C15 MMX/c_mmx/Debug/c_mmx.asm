; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28612.0 

	TITLE	C:\新书示例\MMX指令\c_mmx\c_mmx.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__E915E780_conio@h DB 01H
__7D092690_c_mmx@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BA@LILDGPJP@time?5used?3?5?$CFd?5?6@	; `string'
PUBLIC	??_C@_0P@LKAMBCGP@?$CFd?5?$CL?5?$CFd?5?$DN?5?$CFd?5?6@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__clock:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp___getch:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0P@LKAMBCGP@?$CFd?5?$CL?5?$CFd?5?$DN?5?$CFd?5?6@
CONST	SEGMENT
??_C@_0P@LKAMBCGP@?$CFd?5?$CL?5?$CFd?5?$DN?5?$CFd?5?6@ DB '%d + %d = %d ', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LILDGPJP@time?5used?3?5?$CFd?5?6@
CONST	SEGMENT
??_C@_0BA@LILDGPJP@time?5used?3?5?$CFd?5?6@ DB 'time used: %d ', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\新书示例\MMX指令\c_mmx\c_mmx.c
;	COMDAT _main
_TEXT	SEGMENT
_spendtime$ = -600152					; size = 4
_LEN4$ = -600140					; size = 4
_result$ = -600128					; size = 8
_pc$ = -600108						; size = 4
_pb$ = -600096						; size = 4
_pa$ = -600084						; size = 4
_c$ = -600072						; size = 200000
_b$ = -400064						; size = 200000
_a$ = -200056						; size = 200000
_j$ = -48						; size = 4
_i$ = -36						; size = 4
_edTime$ = -24						; size = 4
_stTime$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 9    : int main() {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -8					; fffffff8H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	mov	eax, 601696				; 00092e60H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-601696]
	mov	ecx, 150424				; 00024b98H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __7D092690_c_mmx@c
	call	@__CheckForDebuggerJustMyCode@4

; 10   : 	clock_t stTime, edTime;
; 11   : 	int   i, j;
; 12   : 	unsigned short  a[LEN];
; 13   : 	unsigned short  b[LEN];
; 14   : 	unsigned short  c[LEN];
; 15   : 	__m64  *pa;
; 16   : 	__m64  *pb;
; 17   : 	__m64  *pc;
; 18   : 	__m64  result;
; 19   : 	int LEN4;
; 20   : 
; 21   : 	srand(time(NULL));

	push	0
	call	_time
	add	esp, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__srand
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 22   : 	for (i = 0; i < LEN; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$[ebp], 100000		; 000186a0H
	jge	SHORT $LN3@main

; 23   : 		a[i] = rand();

	mov	esi, esp
	call	DWORD PTR __imp__rand
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _a$[ebp+ecx*2], ax

; 24   : 		b[i] = rand();

	mov	esi, esp
	call	DWORD PTR __imp__rand
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR _b$[ebp+ecx*2], ax

; 25   : 	}

	jmp	SHORT $LN2@main
$LN3@main:

; 26   : 	a[0] = 1; a[1] = 2; a[2] = 3; a[3] = 4;

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, 1
	mov	WORD PTR _a$[ebp+ecx], dx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, 2
	mov	WORD PTR _a$[ebp+eax], cx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 3
	mov	WORD PTR _a$[ebp+eax], cx
	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, 4
	mov	WORD PTR _a$[ebp+ecx], dx

; 27   : 	b[0] = 2; b[1] = 3; b[2] = 4; b[3] = 5;

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, 2
	mov	WORD PTR _b$[ebp+ecx], dx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, 3
	mov	WORD PTR _b$[ebp+eax], cx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, 4
	mov	WORD PTR _b$[ebp+eax], cx
	mov	eax, 2
	imul	ecx, eax, 3
	mov	edx, 5
	mov	WORD PTR _b$[ebp+ecx], dx

; 28   : 	result = _m_pmaddwd(*(__m64 *)a, *(__m64 *)b);

	movq	mm0, MMWORD PTR _b$[ebp]
	movq	mm1, MMWORD PTR _a$[ebp]
	pmaddwd	mm1, mm0
	movq	MMWORD PTR _result$[ebp], mm1

; 29   : 	stTime = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _stTime$[ebp], eax

; 30   : 	/*  Method 0 : C 对MMX的支持 语句*/
; 31   : 	for (j = 0; j < 1000; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@main:
	cmp	DWORD PTR _j$[ebp], 1000		; 000003e8H
	jge	$LN6@main

; 32   : 		pa = (__m64 *)a;

	lea	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _pa$[ebp], eax

; 33   : 		pb = (__m64 *)b;

	lea	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _pb$[ebp], eax

; 34   : 		pc = (__m64 *)c;

	lea	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _pc$[ebp], eax

; 35   : 		LEN4 = LEN / 4;

	mov	DWORD PTR _LEN4$[ebp], 25000		; 000061a8H

; 36   : 		for (i = 0; i < LEN4; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@main:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _LEN4$[ebp]
	jge	SHORT $LN9@main

; 37   : 			*pc = _m_paddw(*pa, *pb);

	mov	eax, DWORD PTR _pb$[ebp]
	movq	mm0, MMWORD PTR [eax]
	mov	ecx, DWORD PTR _pa$[ebp]
	movq	mm1, MMWORD PTR [ecx]
	paddw	mm1, mm0
	mov	edx, DWORD PTR _pc$[ebp]
	movq	MMWORD PTR [edx], mm1

; 38   : 			pa += 1;

	mov	eax, DWORD PTR _pa$[ebp]
	add	eax, 8
	mov	DWORD PTR _pa$[ebp], eax

; 39   : 			pb += 1;

	mov	eax, DWORD PTR _pb$[ebp]
	add	eax, 8
	mov	DWORD PTR _pb$[ebp], eax

; 40   : 			pc += 1;

	mov	eax, DWORD PTR _pc$[ebp]
	add	eax, 8
	mov	DWORD PTR _pc$[ebp], eax

; 41   : 		}

	jmp	SHORT $LN8@main
$LN9@main:

; 42   : 	}

	jmp	$LN5@main
$LN6@main:

; 43   : 	_m_empty();

	emms

; 44   : 	edTime = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _edTime$[ebp], eax

; 45   : 	unsigned int spendtime = edTime - stTime;

	mov	eax, DWORD PTR _edTime$[ebp]
	sub	eax, DWORD PTR _stTime$[ebp]
	mov	DWORD PTR _spendtime$[ebp], eax

; 46   : 
; 47   : 	printf("time used: %d \n", spendtime);

	mov	eax, DWORD PTR _spendtime$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@LILDGPJP@time?5used?3?5?$CFd?5?6@
	call	_printf
	add	esp, 8

; 48   : 	for (i = 0; i < 10; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@main
$LN11@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@main:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	SHORT $LN12@main

; 49   : 		printf("%d + %d = %d \n", a[i], b[i], c[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _c$[ebp+eax*2]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR _b$[ebp+edx*2]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, WORD PTR _a$[ebp+ecx*2]
	push	edx
	push	OFFSET ??_C@_0P@LKAMBCGP@?$CFd?5?$CL?5?$CFd?5?$DN?5?$CFd?5?6@
	call	_printf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@main
$LN12@main:

; 50   : 	for (i = LEN - 11; i < LEN; i++)

	mov	DWORD PTR _i$[ebp], 99989		; 00018695H
	jmp	SHORT $LN16@main
$LN14@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@main:
	cmp	DWORD PTR _i$[ebp], 100000		; 000186a0H
	jge	SHORT $LN15@main

; 51   : 		printf("%d + %d = %d \n", a[i], b[i], c[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _c$[ebp+eax*2]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, WORD PTR _b$[ebp+edx*2]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, WORD PTR _a$[ebp+ecx*2]
	push	edx
	push	OFFSET ??_C@_0P@LKAMBCGP@?$CFd?5?$CL?5?$CFd?5?$DN?5?$CFd?5?6@
	call	_printf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN14@main
$LN15@main:

; 52   : 	_getch();

	mov	esi, esp
	call	DWORD PTR __imp___getch
	cmp	esi, esp
	call	__RTC_CheckEsp

; 53   : 	return 0;

	xor	eax, eax

; 54   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN22@main:
	DD	3
	DD	$LN21@main
$LN21@main:
	DD	-200056					; fffcf288H
	DD	200000					; 00030d40H
	DD	$LN18@main
	DD	-400064					; fff9e540H
	DD	200000					; 00030d40H
	DD	$LN19@main
	DD	-600072					; fff6d7f8H
	DD	200000					; 00030d40H
	DD	$LN20@main
$LN20@main:
	DB	99					; 00000063H
	DB	0
$LN19@main:
	DB	98					; 00000062H
	DB	0
$LN18@main:
	DB	97					; 00000061H
	DB	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8AA3BE86_time@h
	call	@__CheckForDebuggerJustMyCode@4

; 536  :             return _time64(_Time);

	mov	esi, esp
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 537  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AD6A91B7_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __AD6A91B7_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 644  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
